/*
  The evt class serves to simplify the transfer and arrangement of data
  throughout or program. All events are required to have a description, a year,
  players involved, eType (event type 1-9).
*/

var Evt= function(year,eType,desc,players){
  this.year=year;
  this.eType=eType;
  this.desc=desc;
  this.players=players;
}

Evt.prototype.getPlayers = function () {
  var ps=[];
  for(var i in this.players){
    ps.push(this.players[i][0]);
  }
  return ps;
}

Evt.prototype.getColors = function () {
  var cs=[];
  for(var i in this.players){
    cs.push(this.players[i][1]);
  }
  return cs;
};
Evt.prototype.getDecade = function () {
  return this.year%100;
};
/*
  EventFactory is responsible for loading all events and placinge them into the
  global scope for visualizations to utilize.

  It can generate events in a number of ways, and its generated events will be
  accessible through the .events selector.

  You could feasably have multiple events based on different datasets.
*/

var EventSet= function(){
  this.events=[];// this will contain all Evts generated by this factory.
  this.loaded=false;
}

EventSet.prototype.createEvt=function(evtData){
  var year=evtData.year,
      eType=evtData.eventType,
      desc=evtData.text,
      players=[[evtData.country,evtData.color]];
  this.events.push(new Evt(year,eType,desc,players));
};

/*
  This function is meant to be called with a callback to execute after loading
  the data. This is due to the asynchronous nature of d3.csv().
*/
EventSet.prototype.loadFromCSV=function(csvFile,callback){
  this.events=[];
  var self = this;
  d3.csv(csvFile,function(allData){
    for(i in allData){
      self.createEvt(allData[i]);
    }
    callback();
  });
}
/*
  Searches EventSet for an event of the given year (by decade) and type. returns
  the Evt or null if not found
*/
EventSet.prototype.find=function (yr,tp, exclude=[]){
  return this.events.find(function(evt){
    return evt.year%100==yr && evt.eType==tp && !exclude.includes(evt);
  });
}

EventSet.prototype.findAll=function(yr,tp){
  var allEvts=[];
  while(!allEvts.includes(undefined)){
    allEvts.push(this.find(yr,tp,allEvts));
  }
  allEvts.pop();
  return allEvts
}

EventSet.prototype.isMulti = function (yr,tp) {
  return this.findAll(yr,tp).length>1;
};
